import telebot
from telebot import types
import requests
from deep_translator import GoogleTranslator

from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8136756259:AAHOZQjyrUplYf11gntSi5DTpc-G9vNI6fg"
SPOONACULAR_API_KEY = "97bdb917db30460c98e81c109023a009"

bot = telebot.TeleBot(TOKEN)
database = Database()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–ª—é–¥ (:))
RU_TO_EN_DISHES = {
    "–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞": "pasta carbonara",
    "–±–æ—Ä—â": "borscht",
    "–ø–ª–æ–≤": "pilaf",
    "–ø–µ–ª—å–º–µ–Ω–∏": "dumplings",
    "–æ–ª–∞–¥—å–∏": "pancakes",
    "–±–ª–∏–Ω—ã": "blini",
    "–ª–∞–∑–∞–Ω—å—è": "lasagne",
    "–ø–∏—Ü—Ü–∞": "pizza",
    "—Å—É—à–∏": "sushi",
    "—Ä–æ–ª–ª—ã": "rolls",
    "–±—É—Ä–≥–µ—Ä": "burger",
    "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏": "french fries",
    "—Å–∞–ª–∞—Ç –æ–ª–∏–≤—å–µ": "olivier salad",
    "—Å–µ–ª–µ–¥–∫–∞ –ø–æ–¥ —à—É–±–æ–π": "herring under a fur coat",
    "–≤–∏–Ω–µ–≥—Ä–µ—Ç": "vinaigrette salad",
    "—à–∞—à–ª—ã–∫": "shashlik (grilled meat)",
    "–∫—É—Ä–∏—Ü–∞ –≥—Ä–∏–ª—å": "grilled chicken",
    "–∫–æ—Ç–ª–µ—Ç—ã": "cutlets",
    "–≥—Ä–µ—á–∫–∞": "buckwheat",
    "–º–∞–∫–∞—Ä–æ–Ω—ã –ø–æ-—Ñ–ª–æ—Ç—Å–∫–∏": "navy-style pasta",
    "—Å—É–ø —Ö–∞—Ä—á–æ": "kharcho soup",
    "—Å–æ–ª—è–Ω–∫–∞": "solyanka soup",
    "—â–∏": "shchi (cabbage soup)",
    "—Ä–∞—Å—Å–æ–ª—å–Ω–∏–∫": "rassolnik soup",
    "–≥—É–ª—è—à": "goulash",
    "–±–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω–æ–≤": "beef stroganoff",
    "–≥–æ–ª—É–±—Ü—ã": "stuffed cabbage rolls",
    "–º–∞–Ω—Ç—ã": "manti (dumplings)",
    "—Ö–∏–Ω–∫–∞–ª–∏": "khinkali (dumplings)",
    "—à–∞—É—Ä–º–∞": "shawarma",
    "–∫–µ–±–∞–±": "kebab",
    "—Å–∞–ª–∞—Ç —Ü–µ–∑–∞—Ä—å": "caesar salad",
    "–≥—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç": "greek salad",
    "—Å–∞–ª–∞—Ç –∫–∞–ø—Ä–µ–∑–µ": "caprese salad",
    "—Ä–∏—Å": "rice",
    "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ": "mashed potatoes",
    "–∂–∞—Ä–µ–Ω–∞—è –∫–∞—Ä—Ç–æ—à–∫–∞": "fried potatoes",
    "—è–∏—á–Ω–∏—Ü–∞": "fried eggs",
    "–æ–º–ª–µ—Ç": "omelet",
    "—Å—ã—Ä–Ω–∏–∫–∏": "syrniki (cheese pancakes)",
    "—Ç–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞": "tvorog (cottage cheese) casserole",
    "–º–∞–Ω–Ω–∞—è –∫–∞—à–∞": "semolina porridge",
    "—Ä–∏—Å–æ–≤–∞—è –∫–∞—à–∞": "rice porridge",
    "–≥—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞": "buckwheat porridge",
    "–æ–≤—Å—è–Ω–∞—è –∫–∞—à–∞": "oatmeal",
    "–ø–∏—Ä–æ–∂–∫–∏": "pirozhki (small pies)",
    "–ø–∏—Ä–æ–≥–∏": "pirogi (pies)",
    "–≤–∞—Ä–µ–Ω–∏–∫–∏": "vareniki (dumplings)",
    "–±–ª–∏–Ω—á–∏–∫–∏ —Å –º—è—Å–æ–º": "blinchiki with meat",
    "—á–∞–π": "tea",
    "–∫–æ—Ñ–µ": "coffee"
}


# –ö–Ω–æ–ø–∫–∏
def food_search_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤(—Ä–µ—Ü–µ–ø—Ç—ã –∏ –ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 150 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å)"))
    markup.add(types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"))
    markup.add(types.KeyboardButton("–ù—Ä–∞–≤–∏—Ç—Å—è‚ò∫"))
    return markup


def favorite_markup(recipe_id, recipe_part=0, is_small=True):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_favorite_{recipe_id}"))
    if not is_small:
        if recipe_part == 0:
            markup.add(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥",
                                                  callback_data=f"receipe_part_{recipe_id}_{recipe_part + 1}"))
        elif 0 < recipe_part < 2:
            markup.add(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥",
                                                  callback_data=f"receipe_part_{recipe_id}_{recipe_part + 1}"))
            markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                  callback_data=f"receipe_part_{recipe_id}_{recipe_part - 1}"))
        else:
            markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                  callback_data=f"receipe_part_{recipe_id}_{recipe_part - 1}"))
    return markup


def translate_text(text, source="en", target="ru"):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º deep-translator"""
    try:
        if not text:
            return text

        # –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        if source == "ru" and target == "en":
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞—Ä—å
            lower_text = text.lower()
            if lower_text in RU_TO_EN_DISHES:
                return RU_TO_EN_DISHES[lower_text]

            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
            return GoogleTranslator(source='ru', target='en').translate(text)

        # –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        elif source == "en" and target == "ru":
            return GoogleTranslator(source='en', target='ru').translate(text)

        return text
    except Exception as e:
        print(f"Translation error: {e}")
        return text


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(
        message.chat.id,
        "üç¥ –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=food_search_markup()
    )
    database.add_user(message.from_user.id, message.from_user.username)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤"
@bot.message_handler(func=lambda message: message.text.startswith("–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤"))
def ask_for_dish(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–±–æ—Ä—â'):")
    bot.register_next_step_handler(message, search_recipe)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
@bot.message_handler(func=lambda message: message.text.startswith("–ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"))
def show_history(message):
    history_records = database.get_user_history(message.chat.id)

    if not history_records:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –∏—Å–∫–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç—ã.")
        return

    history_text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
    for i, record in enumerate(history_records, 1):
        dish_name, recipe_title, timestamp = record
        history_text += f"{i}. <b>{dish_name}</b>\n   –ù–∞–π–¥–µ–Ω–æ: {recipe_title}\n   {timestamp}\n\n"

    bot.send_message(message.chat.id, history_text, parse_mode="HTML")


@bot.message_handler(func=lambda message: message.text == "–ù—Ä–∞–≤–∏—Ç—Å—è‚ò∫")
def show_favorites(message):
    favorites = database.get_favourites_count(message.from_user.id)

    if favorites == 0:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
        return

    current_page = 0
    show_favorites_page(message.chat.id, message.from_user.id, current_page)


def show_favorites_page(chat_id, user_id, page=0):
    favorites = database.get_favourites(user_id)
    total_pages = (len(favorites) + 9) // 10

    start_idx = page * 10
    end_idx = start_idx + 10
    page_favorites = favorites[start_idx:end_idx]

    markup = types.InlineKeyboardMarkup()

    for recipe in page_favorites:
        markup.add(types.InlineKeyboardButton(
            text=recipe[1],
            callback_data=f"recipe_{recipe[0]}"
        ))

    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"fav_prev_{page - 1}"
        ))

    if page < total_pages - 1:
        pagination_buttons.append(types.InlineKeyboardButton(
            text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
            callback_data=f"fav_next_{page + 1}"
        ))

    if pagination_buttons:
        markup.row(*pagination_buttons)

    bot.send_message(
        chat_id,
        f"‚ù§Ô∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã: (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith(('fav_prev_', 'fav_next_')))
def handle_favorites_pagination(call):
    action, page = call.data.split('_')[1], int(call.data.split('_')[2])
    show_favorites_page(call.message.chat.id, call.from_user.id, page)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('recipe_'))
def handle_recipe_selection(call):
    recipe_id = int(call.data.split('_')[1])
    resp = database.get_recipe(recipe_id)
    show_recipe(call.message, resp[2], resp[3], resp[4], resp[5], resp[6], resp[7], resp[1])


@bot.callback_query_handler(func=lambda call: call.data.startswith("add_favorite_"))
def add_to_favorites(call):
    recipe_id = call.data.split("_")[-1]

    recipe = database.get_favourite(call.from_user.id, recipe_id)

    if recipe is not None:
        bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
        return

    database.add_favourite(call.from_user.id, recipe_id)

    bot.answer_callback_query(call.id, "–†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")


@bot.callback_query_handler(func=lambda call: call.data.startswith("receipe_part_"))
def get_next_part(call):
    data = list(call.data.split("_"))

    recipe_id = data[-2]
    part = int(data[-1])

    data = database.get_recipe(recipe_id)
    title_ru = data["title"]
    source_url = data["spoon_url"]

    try:
        if part == 0:
            ingridients = data["ingridients"]
            text = f"""
            <b>{title_ru}</b>

            {ingridients}

            üîó <a href="{source_url}">–ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç</a>
            """
            markup = favorite_markup(recipe_id, 0, False)
        elif part == 1:
            instructions = data["instructions"]
            text = f"""
            <b>{title_ru}</b>

            {instructions}

            üîó <a href="{source_url}">–ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç</a>
            """
            markup = favorite_markup(recipe_id, 1, False)
        elif part == 2:
            nutritional = data["nutritional"]
            text = f"""
            <b>{title_ru}</b>

            {nutritional}

            üîó <a href="{source_url}">–ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç</a>
            """
            markup = favorite_markup(recipe_id, 2, False)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if len(text) > 1024:
            text = text[:1000] + "...\n\nüîó <a href=\"{source_url}\">–ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç</a>"

        bot.edit_message_caption(
            caption=text,
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            reply_markup=markup,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"Error in get_next_part: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


# –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞
def search_recipe(message):
    dish_ru = message.text.strip().lower()

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
    dish_en = translate_text(dish_ru, "ru", "en")

    bot.send_message(message.chat.id, f"üîç –ò—â–µ–º: {dish_ru}...")

    try:
        # –ò—â–µ–º –≤ Spoonacular
        if dish_ru in RU_TO_EN_DISHES:
            search_url = f"https://api.spoonacular.com/recipes/complexSearch?query={dish_en}&apiKey={SPOONACULAR_API_KEY}"
            response = requests.get(search_url, timeout=15)
        else:
            search_url = f"https://api.spoonacular.com/recipes/complexSearch?query={dish_ru}&apiKey={SPOONACULAR_API_KEY}"
            response = requests.get(search_url, timeout=15)
        data = response.json()

        if not data.get("results"):
            bot.send_message(message.chat.id, "üò¢ –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
        recipe_id = data["results"][0]["id"]
        recipe_info = get_recipe_info(recipe_id)

        if not recipe_info:
            bot.send_message(message.chat.id, "üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        recipe_title = recipe_info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        database.add_history(message.chat.id, dish_ru, recipe_title)

        image = recipe_info.get("image")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        ingridients, instructions, calories, title_ru, source_url = format_recipe_info(recipe_info)

        database.add_receipt(recipe_id, image, title_ru, ingridients, instructions, calories, source_url)
        show_recipe(message, image, title_ru, ingridients, instructions, calories, source_url, recipe_id)

    except requests.exceptions.Timeout:
        bot.send_message(message.chat.id, "‚è≥ –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def show_recipe(message, image, title_ru, ingridients, instructions, calories, source_url, recipe_id):
    try:
        text = f"""
        <b>{title_ru}</b>

        {ingridients}

        {instructions}

        {calories}

        üîó <a href="{source_url}">–ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç</a>
        """

        is_small = len(text) < 1024

        if is_small:
            markup = favorite_markup(recipe_id)
        else:
            text = f"""
                <b>{title_ru}</b>

                {ingridients}

                üîó <a href="{source_url}">–ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç</a>
                """
            markup = favorite_markup(recipe_id, 0, False)

        if image is None:
            bot.send_message(message.chat.id, text,
                             parse_mode="HTML",
                             reply_markup=markup)
        else:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(text) > 1024:
                text = text[:1000] + "...\n\nüîó <a href=\"{source_url}\">–ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç</a>"

            bot.send_photo(message.chat.id,
                           image,
                           parse_mode="HTML",
                           reply_markup=markup,
                           caption=text)
    except Exception as e:
        print(f"Error in show_recipe: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞")


def get_recipe_info(recipe_id):
    try:
        url = f"https://api.spoonacular.com/recipes/{recipe_id}/information?apiKey={SPOONACULAR_API_KEY}&includeNutrition=true"
        response = requests.get(url, timeout=15)
        return response.json()
    except Exception as e:
        print(f"Error getting recipe info: {e}")
        return None


def format_recipe_info(recipe_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    title = recipe_data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    title_ru = translate_text(title, "en", "ru")

    # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
    nutrition = recipe_data.get("nutrition", {})
    nutrients = nutrition.get("nutrients", [])

    calories = next((n for n in nutrients if n.get("name") == "Calories"), {}).get("amount", "?")
    protein = next((n for n in nutrients if n.get("name") == "Protein"), {}).get("amount", "?")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    instructions = ""
    if recipe_data.get("analyzedInstructions") and len(recipe_data["analyzedInstructions"]) > 0:
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        steps = recipe_data["analyzedInstructions"][0].get("steps", [])
        for step in steps:
            translated_step = translate_text(step['step'], "en", "ru")
            instructions += f"{step['number']}. {translated_step}\n"
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã—Ö
        instructions = translate_text(recipe_data.get("instructions", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."), "en", "ru")

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    extended_ingredients = recipe_data.get("extendedIngredients", [])
    ingredients_ru = []
    for ing in extended_ingredients:
        original_text = ing.get('original', '?')
        translated_ingredient = translate_text(original_text, "en", "ru")
        ingredients_ru.append(f"‚Ä¢ {translated_ingredient}")

    ingredients_ru_text = "\n".join(ingredients_ru) if ingredients_ru else "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã."

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Ü–µ–ø—Ç
    source_url = recipe_data.get("sourceUrl", "#")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return beautify_recipe(title_ru, ingredients_ru_text, instructions, calories, protein, source_url)


def beautify_recipe(title_ru, ingredients_ru_text, instructions, calories, protein, source_url):
    ingridients = f"""
        üìù <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>
        {ingredients_ru_text}
    """

    instructions = f"""
        üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
        {instructions}
    """

    calories = f"""
        ‚öñÔ∏è <b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</b>
        üî• –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª
        ü•© –ë–µ–ª–∫–∏: {protein} –≥
    """

    return ingridients, instructions, calories, title_ru, source_url


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")